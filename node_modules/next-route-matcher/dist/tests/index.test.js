"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));

// node_modules/ava/lib/worker/utils.cjs
var require_utils = __commonJS({
  "node_modules/ava/lib/worker/utils.cjs"(exports) {
    "use strict";
    var process = require("process");
    var { isMainThread } = require("worker_threads");
    exports.isRunningInThread = isMainThread === false;
    exports.isRunningInChildProcess = typeof process.send === "function";
  }
});

// node_modules/ava/lib/worker/guard-environment.cjs
var require_guard_environment = __commonJS({
  "node_modules/ava/lib/worker/guard-environment.cjs"() {
    "use strict";
    var path = require("path");
    var process = require("process");
    var { isRunningInThread, isRunningInChildProcess } = require_utils();
    if (!isRunningInChildProcess && !isRunningInThread) {
      if (process.argv[1]) {
        const fp = path.relative(".", process.argv[1]);
        console.log();
        console.error(`Test files must be run with the AVA CLI:

    $ ava ${fp}
`);
        process.exit(1);
      } else {
        throw new Error("The \u2019ava\u2019 module can only be imported in test files");
      }
    }
  }
});

// node_modules/ava/lib/worker/state.cjs
var require_state = __commonJS({
  "node_modules/ava/lib/worker/state.cjs"(exports) {
    "use strict";
    exports.flags = { loadedMain: false };
    exports.refs = { runnerChain: null };
    exports.sharedWorkerTeardowns = [];
    exports.waitForReady = [];
  }
});

// node_modules/ava/lib/worker/main.cjs
var require_main = __commonJS({
  "node_modules/ava/lib/worker/main.cjs"(exports, module2) {
    "use strict";
    require_guard_environment();
    var assert = require("assert");
    var { flags, refs } = require_state();
    assert(refs.runnerChain);
    flags.loadedMain = true;
    module2.exports = refs.runnerChain;
  }
});

// node_modules/ava/entrypoints/main.mjs
var import_main = __toESM(require_main(), 1);

// src/lib/route-regex.ts
function escapeRegex(str) {
  return str.replace(/[|\\{}()[\]^$+*?.-]/g, "\\$&");
}
function parseParameter(param) {
  const optional = param.startsWith("[") && param.endsWith("]");
  if (optional) {
    param = param.slice(1, -1);
  }
  const repeat = param.startsWith("...");
  if (repeat) {
    param = param.slice(3);
  }
  return { key: param, repeat, optional };
}
function getParametrizedRoute(route) {
  const segments = (route.replace(/\/$/, "") || "/").slice(1).split("/");
  const groups = {};
  let groupIndex = 1;
  const parameterizedRoute = segments.map((segment) => {
    if (segment.startsWith("[") && segment.endsWith("]")) {
      const { key, optional, repeat } = parseParameter(segment.slice(1, -1));
      groups[key] = { pos: groupIndex++, repeat, optional };
      return repeat ? optional ? "(?:/(.+?))?" : "/(.+?)" : "/([^/]+?)";
    } else {
      return `/${escapeRegex(segment)}`;
    }
  }).join("");
  if (typeof window === "undefined") {
    let routeKeyCharCode = 97;
    let routeKeyCharLength = 1;
    const getSafeRouteKey = () => {
      let routeKey = "";
      for (let i = 0; i < routeKeyCharLength; i++) {
        routeKey += String.fromCharCode(routeKeyCharCode);
        routeKeyCharCode++;
        if (routeKeyCharCode > 122) {
          routeKeyCharLength++;
          routeKeyCharCode = 97;
        }
      }
      return routeKey;
    };
    const routeKeys = {};
    let namedParameterizedRoute = segments.map((segment) => {
      if (segment.startsWith("[") && segment.endsWith("]")) {
        const { key, optional, repeat } = parseParameter(segment.slice(1, -1));
        let cleanedKey = key.replace(/\W/g, "");
        let invalidKey = false;
        if (cleanedKey.length === 0 || cleanedKey.length > 30) {
          invalidKey = true;
        }
        if (!isNaN(parseInt(cleanedKey.substr(0, 1)))) {
          invalidKey = true;
        }
        if (invalidKey) {
          cleanedKey = getSafeRouteKey();
        }
        routeKeys[cleanedKey] = key;
        return repeat ? optional ? `(?:/(?<${cleanedKey}>.+?))?` : `/(?<${cleanedKey}>.+?)` : `/(?<${cleanedKey}>[^/]+?)`;
      } else {
        return `/${escapeRegex(segment)}`;
      }
    }).join("");
    return {
      parameterizedRoute,
      namedParameterizedRoute,
      groups,
      routeKeys
    };
  }
  return {
    parameterizedRoute,
    groups
  };
}
function getRouteRegex(normalizedRoute) {
  const result = getParametrizedRoute(normalizedRoute);
  if ("routeKeys" in result) {
    return {
      re: new RegExp(`^${result.parameterizedRoute}(?:/)?$`),
      groups: result.groups,
      routeKeys: result.routeKeys,
      namedRegex: `^${result.namedParameterizedRoute}(?:/)?$`
    };
  }
  return {
    re: new RegExp(`^${result.parameterizedRoute}(?:/)?$`),
    groups: result.groups
  };
}

// src/lib/get-route-matcher-func.ts
function getRouteMatcherFunc(routeRegex) {
  const { re, groups } = routeRegex;
  return (pathname) => {
    const routeMatch = re.exec(pathname);
    if (!routeMatch) {
      return false;
    }
    const decode = (param) => {
      try {
        return decodeURIComponent(param);
      } catch (_) {
        throw new Error("failed to decode param");
      }
    };
    const params = {};
    Object.keys(groups).forEach((slugName) => {
      const g = groups[slugName];
      const m = routeMatch[g.pos];
      if (m !== void 0) {
        params[slugName] = ~m.indexOf("/") ? m.split("/").map((entry) => decode(entry)) : g.repeat ? [decode(m)] : decode(m);
      }
    });
    return params;
  };
}

// src/index.ts
var getRouteMatcherUgly = (routeMapping) => {
  const routes = [];
  for (const [fsPath, serverFunc] of Object.entries(routeMapping)) {
    const routeRegex = getRouteRegex(fsPath);
    routes.push({
      fsPath,
      routeRegex,
      matcherFunc: getRouteMatcherFunc(routeRegex),
      serverFunc,
      priority: -Object.keys(routeRegex.groups).length
    });
  }
  routes.sort((a, b) => b.priority - a.priority);
  return (incomingPath) => {
    for (const { serverFunc, matcherFunc, fsPath } of routes) {
      const match = matcherFunc(incomingPath);
      if (match) {
        return { serverFunc, match, fsPath };
      }
    }
    return null;
  };
};
var getRouteMatcher = (routes) => {
  const routeMapping = {};
  for (const route of routes)
    routeMapping[route] = () => {
    };
  const uglyMatcher = getRouteMatcherUgly(routeMapping);
  return (incomingPath) => {
    const result = uglyMatcher(incomingPath);
    if (!result)
      return null;
    return { matchedRoute: result.fsPath, routeParams: result.match };
  };
};
var src_default = getRouteMatcher;

// src/tests/index.test.ts
(0, import_main.default)("should match a variety of routes", (t) => {
  const routeMatcher = src_default([
    "/health",
    "/api/nested",
    "/api/items/[item_name]",
    "/api/[someslug]/list",
    "/api/[slug1]/deepnest/[slug2]/image.png",
    "/api/[someslug]/greetings/[...anything]"
  ]);
  t.deepEqual(routeMatcher("/health"), {
    matchedRoute: "/health",
    routeParams: {}
  });
  t.deepEqual(routeMatcher("/api/nested"), {
    matchedRoute: "/api/nested",
    routeParams: {}
  });
  t.deepEqual(routeMatcher("/api/items/someitem"), {
    matchedRoute: "/api/items/[item_name]",
    routeParams: { item_name: "someitem" }
  });
  t.deepEqual(routeMatcher("/api/someslug/list"), {
    matchedRoute: "/api/[someslug]/list",
    routeParams: { someslug: "someslug" }
  });
  t.deepEqual(routeMatcher("/api/slug1/deepnest/slug2/image.png"), {
    matchedRoute: "/api/[slug1]/deepnest/[slug2]/image.png",
    routeParams: {
      slug1: "slug1",
      slug2: "slug2"
    }
  });
  t.deepEqual(routeMatcher("/api/someslug/greetings/something/somethingelse.txt"), {
    matchedRoute: "/api/[someslug]/greetings/[...anything]",
    routeParams: {
      someslug: "someslug",
      anything: ["something", "somethingelse.txt"]
    }
  });
});
