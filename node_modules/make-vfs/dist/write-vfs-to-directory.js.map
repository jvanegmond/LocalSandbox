{"version":3,"sources":["../src/write-vfs-to-directory.ts"],"sourcesContent":["import fs from \"fs\"\nimport path from \"path\"\n\nexport const writeVfsToDirectory = async (opts: {\n  /* Maps file paths to file contents, can be a local or absolute path */\n  vfs: Record<string, Buffer | string>\n\n  /*\n     Input directory inside VFS, anything outside this directory is ignored.\n     The root files of the vfsDir will become the root files of the outDir\n  */\n  vfsDir?: string\n\n  /* Directory to output VFS to */\n  outDir: string\n}) => {\n  const { vfs, vfsDir, outDir } = opts\n\n  // Iterate over each entry in the virtual file system\n  for (const [filePath, content] of Object.entries(vfs)) {\n    // If vfsDir is specified, skip files outside this directory\n    if (vfsDir && !filePath.startsWith(vfsDir)) {\n      continue\n    }\n\n    // Compute the relative path if vfsDir is provided\n    const relativePath = vfsDir ? path.relative(vfsDir, filePath) : filePath\n    const outputPath = path.join(outDir, relativePath)\n\n    // Ensure the directory exists\n    await fs.promises.mkdir(path.dirname(outputPath), { recursive: true })\n\n    // Write the file to the output directory\n    await fs.promises.writeFile(outputPath, content)\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAe;AACf,kBAAiB;AAEV,IAAM,sBAAsB,OAAO,SAYpC;AACJ,QAAM,EAAE,KAAK,QAAQ,OAAO,IAAI;AAGhC,aAAW,CAAC,UAAU,OAAO,KAAK,OAAO,QAAQ,GAAG,GAAG;AAErD,QAAI,UAAU,CAAC,SAAS,WAAW,MAAM,GAAG;AAC1C;AAAA,IACF;AAGA,UAAM,eAAe,SAAS,YAAAA,QAAK,SAAS,QAAQ,QAAQ,IAAI;AAChE,UAAM,aAAa,YAAAA,QAAK,KAAK,QAAQ,YAAY;AAGjD,UAAM,UAAAC,QAAG,SAAS,MAAM,YAAAD,QAAK,QAAQ,UAAU,GAAG,EAAE,WAAW,KAAK,CAAC;AAGrE,UAAM,UAAAC,QAAG,SAAS,UAAU,YAAY,OAAO;AAAA,EACjD;AACF;","names":["path","fs"]}