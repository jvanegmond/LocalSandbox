import fs from "fs"
import path from "path"

export const writeVfsToDirectory = async (opts: {
  /* Maps file paths to file contents, can be a local or absolute path */
  vfs: Record<string, Buffer | string>

  /*
     Input directory inside VFS, anything outside this directory is ignored.
     The root files of the vfsDir will become the root files of the outDir
  */
  vfsDir?: string

  /* Directory to output VFS to */
  outDir: string
}) => {
  const { vfs, vfsDir, outDir } = opts

  // Iterate over each entry in the virtual file system
  for (const [filePath, content] of Object.entries(vfs)) {
    // If vfsDir is specified, skip files outside this directory
    if (vfsDir && !filePath.startsWith(vfsDir)) {
      continue
    }

    // Compute the relative path if vfsDir is provided
    const relativePath = vfsDir ? path.relative(vfsDir, filePath) : filePath
    const outputPath = path.join(outDir, relativePath)

    // Ensure the directory exists
    await fs.promises.mkdir(path.dirname(outputPath), { recursive: true })

    // Write the file to the output directory
    await fs.promises.writeFile(outputPath, content)
  }
}
