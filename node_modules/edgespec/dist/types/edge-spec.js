import { createEdgeSpecRequest, } from "./web-handler.js";
import { wrapMiddlewares } from "../create-with-edge-spec.js";
import { getDefaultContext } from "./context.js";
export function makeRequestAgainstEdgeSpec(edgeSpec, options = {}) {
    return async (request) => {
        const { routeMatcher, routeMapWithHandlers, handle404 = () => new Response("Not found", {
            status: 404,
        }), } = edgeSpec;
        const { removePathnamePrefix, automaticallyRemovePathnamePrefix = true } = options;
        let pathname = new URL(request.url).pathname;
        if (removePathnamePrefix) {
            if (automaticallyRemovePathnamePrefix) {
                throw new Error("automaticallyRemovePathnamePrefix and removePathnamePrefix cannot both be specified");
            }
            pathname = pathname.replace(removePathnamePrefix, "");
        }
        else {
            if (request.routeParams) {
                // These are the route params of the parent route hosting the EdgeSpec service
                const routeParams = request.routeParams;
                // If the child service is hosted at /foo/[...path], we want to find the [...path] parameter
                const wildcardRouteParameters = Object.values(routeParams).filter((p) => Array.isArray(p));
                if (wildcardRouteParameters.length === 0) {
                    throw new Error("No wildcard route parameters found");
                }
                if (wildcardRouteParameters.length > 1) {
                    throw new Error("Only one wildcard route parameter is supported");
                }
                const wildcardRouteParameter = wildcardRouteParameters[0];
                pathname = `/${wildcardRouteParameter.join("/")}`;
            }
        }
        const { matchedRoute, routeParams } = routeMatcher(pathname) ?? {};
        let routeFn = matchedRoute && routeMapWithHandlers[matchedRoute];
        const edgeSpecRequest = createEdgeSpecRequest(request, {
            edgeSpec,
            routeParams: routeParams ?? {},
        });
        if (!routeFn) {
            return await handle404(edgeSpecRequest, getDefaultContext());
        }
        return wrapMiddlewares(options.middleware ?? [], routeFn, edgeSpecRequest, getDefaultContext());
    };
}
