import type { FetchEvent } from "@edge-runtime/primitives";
import { EdgeSpecRouteBundle } from "./edge-spec.js";
import { Primitive } from "type-fest";
import { z } from "zod";
import { ResponseTypeToContext } from "./context.js";
import type { RouteSpec } from "./route-spec.js";
import type { GlobalSpec } from "./global-spec.js";
export type HTTPMethods = "GET" | "POST" | "DELETE" | "PUT" | "PATCH" | "HEAD" | "OPTIONS";
export type EdgeSpecRouteParams = {
    [routeParam: string]: string | string[];
};
export type HeadersDescriptor = Headers | HeadersInit;
export interface EdgeSpecRequestOptions {
    routeParams: EdgeSpecRouteParams;
    edgeSpec: EdgeSpecRouteBundle;
}
export type EdgeSpecRequest<T = {}> = EdgeSpecRequestOptions & Request & T;
export interface SerializableToResponse {
    /**
     *  Serialize the response to a Response object
     *
     * @throws z.ZodError if the response does not match the schema
     * @param schema - the schema to validate the response against
     */
    serializeToResponse(schema: z.ZodTypeAny): Response;
    statusCode(): number;
}
export type ValidFormDataValue = Primitive | Blob;
export declare abstract class EdgeSpecResponse implements SerializableToResponse {
    protected options: ResponseInit;
    abstract serializeToResponse(schema: z.ZodTypeAny): Response;
    statusCode(): number;
    status(status: number): this;
    header(key: string, value: string): this;
    headers(headers: HeadersInit): this;
    statusText(statusText: string): this;
    constructor(options?: ResponseInit);
    static json<T>(...args: ConstructorParameters<typeof EdgeSpecJsonResponse<T>>): EdgeSpecJsonResponse<T>;
    static multipartFormData<T extends Record<string, ValidFormDataValue>>(...args: ConstructorParameters<typeof EdgeSpecMultiPartFormDataResponse<T>>): EdgeSpecMultiPartFormDataResponse<T>;
    static custom<T, const C extends string>(...args: ConstructorParameters<typeof EdgeSpecCustomResponse<T, C>>): EdgeSpecCustomResponse<T, C>;
}
export declare class EdgeSpecJsonResponse<T> extends EdgeSpecResponse {
    data: T;
    constructor(data: T, options?: ResponseInit);
    serializeToResponse(schema: z.ZodTypeAny): Response;
}
export declare class EdgeSpecCustomResponse<T, const C extends string> extends EdgeSpecResponse {
    data: T;
    contentType: C;
    constructor(data: T, contentType: C, options?: ResponseInit);
    serializeToResponse(schema: z.ZodTypeAny): Response;
}
export declare class MiddlewareResponseData extends EdgeSpecResponse {
    constructor(options?: ResponseInit);
    serializeToResponse(): Response;
}
export declare class EdgeSpecMultiPartFormDataResponse<T extends Record<string, ValidFormDataValue>> extends EdgeSpecResponse {
    data: T;
    constructor(data: T, options?: ResponseInit);
    serializeToResponse(schema: z.ZodTypeAny): Response;
}
export type EdgeSpecRouteFn<RequestOptions = EdgeSpecRequestOptions, ResponseType extends SerializableToResponse | Response = Response, Context = ResponseTypeToContext<ResponseType>> = ((req: EdgeSpecRequest<RequestOptions>, ctx: Context) => ResponseType | Promise<ResponseType>) & {
    _globalSpec?: GlobalSpec;
    _routeSpec?: RouteSpec<any>;
};
export type EdgeSpecFetchEvent = FetchEvent & {
    request: EdgeSpecRequest;
};
export declare function createEdgeSpecRequest(request: Request, options: EdgeSpecRequestOptions): EdgeSpecRequest;
export declare function mergeHeaders(h1: HeadersDescriptor | undefined | null, h2: HeadersDescriptor | undefined | null): Headers;
