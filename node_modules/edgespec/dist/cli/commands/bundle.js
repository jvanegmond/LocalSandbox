import { Command, Option } from "clipanion";
import { bundle } from "../../bundle/bundle.js";
import fs from "node:fs/promises";
import path from "node:path";
import { durationFormatter, sizeFormatter } from "human-readable";
import ora from "ora";
import { BaseCommand } from "../base-command.js";
export class BundleCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.outputPath = Option.String("--output,-o", {
            description: "The path to output the bundle",
            required: true,
        });
    }
    async run(config) {
        const spinner = ora("Bundling...").start();
        const buildStartedAt = performance.now();
        const output = await bundle(config);
        await fs.mkdir(path.dirname(this.outputPath), { recursive: true });
        await fs.writeFile(this.outputPath, output);
        spinner.stopAndPersist({
            symbol: "☃️",
            text: ` brr... bundled in ${durationFormatter({
                allowMultiples: ["m", "s", "ms"],
            })(performance.now() - buildStartedAt)} (${sizeFormatter()(output.length)})`,
        });
    }
}
BundleCommand.paths = [[`bundle`]];
BundleCommand.usage = Command.Usage({
    description: "Bundle your app for distribution",
    details: `
      This command bundles your app for distribution. It outputs a zero-dependency file that can be run in a variety of environments.
    `,
    examples: [[`Bundle your app`, `$0 bundle --output bundled.js`]],
});
