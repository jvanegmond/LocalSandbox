/// <reference types="node" resolution-mode="require"/>
export declare const devServer: {
    startDevServer: (options: import("./dev-server.js").StartDevServerOptions) => Promise<{
        port: string;
        stop: () => Promise<void>;
    }>;
    headless: {
        startBundler: ({ config, initialRpcChannels, }: import("./headless/start-bundler.js").StartHeadlessDevBundlerOptions) => Promise<{
            stop: () => Promise<void>;
            birpc: import("birpc").BirpcGroup<import("./headless/types.js").HttpServerRpcFunctions, import("./headless/types.js").BundlerRpcFunctions>;
        }>;
        startServer: ({ port, config, rpcChannel, middleware, onListening, onBuildStart, onBuildEnd, }: import("./headless/start-server.js").StartHeadlessDevServerOptions) => Promise<{
            server: import("http").Server<typeof import("http").IncomingMessage, typeof import("http").ServerResponse>;
            stop: () => Promise<void>;
            getBuildResult: () => Promise<import("./headless/types.js").BundlerBuildResult>;
        }>;
    };
};
