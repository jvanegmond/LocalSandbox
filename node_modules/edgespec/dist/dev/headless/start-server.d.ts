/// <reference types="node" resolution-mode="require"/>
import { ResolvedEdgeSpecConfig } from "../../config/utils.js";
import { Middleware } from "../../middleware/index.js";
import { type ChannelOptions } from "birpc";
import { HttpServerRpcFunctions } from "./types.js";
export interface StartHeadlessDevServerOptions {
    port: number;
    config: ResolvedEdgeSpecConfig;
    rpcChannel: ChannelOptions;
    middleware?: Middleware[];
    onListening?: (port: number) => void;
    onBuildStart?: HttpServerRpcFunctions["onBuildStart"];
    onBuildEnd?: HttpServerRpcFunctions["onBuildEnd"];
}
/**
 * Start a headless EdgeSpec dev server. It receives a bundle from the headless dev bundler and serves it.
 *
 * This must be run within a native context (Node.js, Bun, or Deno).
 */
export declare const startHeadlessDevServer: ({ port, config, rpcChannel, middleware, onListening, onBuildStart, onBuildEnd, }: StartHeadlessDevServerOptions) => Promise<{
    server: import("http").Server<typeof import("http").IncomingMessage, typeof import("http").ServerResponse>;
    stop: () => Promise<void>;
    getBuildResult: () => Promise<import("./types.js").BundlerBuildResult>;
}>;
