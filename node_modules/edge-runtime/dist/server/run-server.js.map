{"version":3,"file":"run-server.js","sourceRoot":"","sources":["../../src/server/run-server.ts"],"names":[],"mappings":";;;;;;AAAA,qDAAyD;AAEzD,gEAAiC;AACjC,gDAAuB;AAEvB,+BAAgC;AAmBhC;;;;GAIG;AACI,KAAK,UAAU,SAAS,CAC7B,OAAyC;IAEzC,IAAI,OAAO,CAAC,IAAI,KAAK,SAAS;QAAE,OAAO,CAAC,IAAI,GAAG,CAAC,CAAA;IAChD,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,IAAA,8BAAa,EAAC,OAAO,CAAC,CAAA;IACrD,MAAM,MAAM,GAAG,cAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAA;IACzC,MAAM,GAAG,GAAG,MAAM,IAAA,sBAAM,EAAC,MAAM,EAAE,OAAO,CAAC,CAAA;IACzC,MAAM,WAAW,GAAG,IAAA,gBAAS,EAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA;IACxD,OAAO;QACL,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC;QAChB,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;QACzE,SAAS;KACV,CAAA;AACH,CAAC;AAbD,8BAaC","sourcesContent":["import { createHandler, Options } from './create-handler'\nimport type { EdgeContext } from '@edge-runtime/vm'\nimport listen from 'async-listen'\nimport http from 'http'\nimport type { ListenOptions } from 'net'\nimport { promisify } from 'util'\n\ninterface ServerOptions<T extends EdgeContext> extends Options<T> {}\n\nexport interface EdgeRuntimeServer {\n  /**\n   * The server URL.\n   */\n  url: string\n  /**\n   * Waits for all the current effects and closes the server.\n   */\n  close: () => Promise<void>\n  /**\n   * Waits for all current effects returning their result.\n   */\n  waitUntil: () => Promise<any[]>\n}\n\n/**\n * This helper will create a handler based on the given options and then\n * immediately run a server on the provided port. If there is no port, the\n * server will use a random one.\n */\nexport async function runServer<T extends EdgeContext>(\n  options: ListenOptions & ServerOptions<T>,\n): Promise<EdgeRuntimeServer> {\n  if (options.port === undefined) options.port = 0\n  const { handler, waitUntil } = createHandler(options)\n  const server = http.createServer(handler)\n  const url = await listen(server, options)\n  const closeServer = promisify(server.close.bind(server))\n  return {\n    url: String(url),\n    close: () => Promise.all([waitUntil(), closeServer()]).then(() => void 0),\n    waitUntil,\n  }\n}\n"]}